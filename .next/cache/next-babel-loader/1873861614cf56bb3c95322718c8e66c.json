{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Heading, Text } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport CountUp from \"react-countup\";\nimport VisibilitySensor from 'react-visibility-sensor';\n\nconst MyCount = _ref => {\n  let {\n    endPoint,\n    startPoint = 0,\n    duration = 1.7\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"endPoint\", \"startPoint\", \"duration\"]);\n\n  const {\n    0: viewPortEntered,\n    1: setViewPortEntered\n  } = useState(false);\n  return __jsx(React.Fragment, null, __jsx(CountUp, _extends({\n    end: endPoint,\n    start: viewPortEntered ? null : startPoint,\n    useEasing: true,\n    duration: duration\n  }, props), ({\n    countUpRef\n  }) => {\n    return __jsx(VisibilitySensor, {\n      active: !viewPortEntered,\n      onChange: isVisible => {\n        if (isVisible) {\n          setViewPortEntered(true);\n        }\n      }\n    }, __jsx(\"span\", _extends({\n      ref: countUpRef,\n      className: \"mb-0 text-primary\"\n    }, props)));\n  }), __jsx(\"span\", {\n    className: \"display6\"\n  }, props.subtext || \"\"), __jsx(\"span\", {\n    className: \"text-secondary\"\n  }, props.description || \"\"));\n};\n\nexport default MyCount;","map":null,"metadata":{},"sourceType":"module"}