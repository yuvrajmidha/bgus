{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"endPoint\", \"startPoint\", \"duration\"];\nvar __jsx = React.createElement;\nimport { Heading, Text } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport CountUp from \"react-countup\";\nimport VisibilitySensor from 'react-visibility-sensor';\n\nvar MyCount = function MyCount(_ref) {\n  var endPoint = _ref.endPoint,\n      _ref$startPoint = _ref.startPoint,\n      startPoint = _ref$startPoint === void 0 ? 0 : _ref$startPoint,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 1.7 : _ref$duration,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(false),\n      viewPortEntered = _useState[0],\n      setViewPortEntered = _useState[1];\n\n  return __jsx(React.Fragment, null, __jsx(CountUp, _extends({\n    end: endPoint,\n    start: viewPortEntered ? null : startPoint,\n    useEasing: true,\n    duration: duration\n  }, props), function (_ref2) {\n    var countUpRef = _ref2.countUpRef;\n    return __jsx(VisibilitySensor, {\n      active: !viewPortEntered,\n      onChange: function onChange(isVisible) {\n        if (isVisible) {\n          setViewPortEntered(true);\n        }\n      }\n    }, __jsx(\"span\", _extends({\n      ref: countUpRef,\n      className: \"mb-0 text-primary\"\n    }, props)));\n  }), __jsx(\"span\", {\n    className: \"display6\"\n  }, props.subtext || \"\"), __jsx(\"span\", {\n    className: \"text-secondary\"\n  }, props.description || \"\"));\n};\n\nexport default MyCount;","map":null,"metadata":{},"sourceType":"module"}