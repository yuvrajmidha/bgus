{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"isChecked\"];\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { FormControl, FormLabel, Input, Button, ModalContent, ModalHeader, Spinner, Modal, ModalOverlay, Textarea, Tabs, TabPanels, TabList, TabPanel, Tab, Select, Box, Radio, RadioGroup, Collapse, ModalBody, Text } from \"@chakra-ui/react\";\nimport deviceList from '../../deviceDetect.js';\nimport Toast from '../Toast/main';\nimport { useDisclosure } from \"@chakra-ui/react\";\nimport { deviceType, browserName, osName } from \"react-device-detect\";\nimport SVG from '../svg/SVG';\nimport axios from \"axios\";\nimport cookie from 'react-cookies';\nimport { FaArrowLeft } from 'react-icons/fa';\nvar CustomRadio = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var isChecked = props.isChecked,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  return __jsx(Button, _extends({\n    ref: ref,\n    colorScheme: isChecked ? \"red\" : \"gray\",\n    color: isChecked ? \"light.500\" : 'black.500',\n    \"aria-checked\": isChecked,\n    role: \"radio\",\n    height: \"120px\"\n  }, rest));\n});\nvar deviceInfo = {\n  browser: browserName,\n  os: osName,\n  device: deviceType\n};\n\nfunction ErrorForm(props) {\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  var _useState = useState(cookie.load('name') ? cookie.load('name') : ''),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(cookie.load('email') ? cookie.load('email') : ''),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      description = _useState3[0],\n      setDescription = _useState3[1];\n\n  var _useState4 = useState(cookie.load('phone') ? cookie.load('phone') : ''),\n      phone = _useState4[0],\n      setPhone = _useState4[1];\n\n  var _useState5 = useState(''),\n      error = _useState5[0],\n      setError = _useState5[1];\n\n  var _useState6 = useState(deviceInfo.browser),\n      browser = _useState6[0],\n      setBrowser = _useState6[1];\n\n  var _useState7 = useState(deviceInfo.device),\n      device = _useState7[0],\n      setDevice = _useState7[1];\n\n  var _useState8 = useState(deviceInfo.os),\n      operatingsystem = _useState8[0],\n      setOs = _useState8[1];\n\n  var _useState9 = useState(''),\n      othererror = _useState9[0],\n      setOtherInput = _useState9[1];\n\n  var _useState10 = useState(false),\n      rend = _useState10[0],\n      setRend = _useState10[1];\n\n  var _useState11 = useState(false),\n      show = _useState11[0],\n      setShow = _useState11[1];\n\n  var _useState12 = useState(cookie.load('name') ? false : true),\n      shown = _useState12[0],\n      setShown = _useState12[1];\n\n  var _useState13 = useState(cookie.load('email') ? false : true),\n      showe = _useState13[0],\n      setShowe = _useState13[1];\n\n  var _useState14 = useState(cookie.load('phone') ? false : true),\n      showp = _useState14[0],\n      setShowp = _useState14[1];\n\n  var _useState15 = useState(0),\n      tabIndex = _useState15[0],\n      setTabIndex = _useState15[1];\n\n  var _useState16 = useState(deviceInfo.device),\n      activeButton = _useState16[0],\n      setActiveButton = _useState16[1];\n\n  var _useState17 = useState(1000),\n      screenWidth = _useState17[0],\n      setScreenWidth = _useState17[1];\n\n  var form = {\n    name: name,\n    email: email,\n    description: description,\n    contactNumber: phone,\n    error: othererror ? othererror : error,\n    browser: browser,\n    device: device,\n    operatingSystem: operatingsystem\n  };\n\n  var _useState18 = useState(false),\n      isLoading = _useState18[0],\n      loadingState = _useState18[1];\n\n  var _useState19 = useState(''),\n      formResponse = _useState19[0],\n      setResponse = _useState19[1];\n\n  var onChange = function onChange(event) {\n    var target = event.target;\n    var fieldname = target.name;\n    var value = target.value;\n\n    switch (fieldname) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'description':\n        setDescription(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'errortype':\n        setError(value);\n        break;\n\n      case 'operatingsystem':\n        setOs(value);\n        break;\n\n      case 'browser':\n        setBrowser(value);\n        break;\n\n      case 'othererror':\n        setOtherInput(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleToggle = function handleToggle(param) {\n    setShow(param);\n    setRend(param);\n    setOtherInput('');\n  };\n\n  var refreshForm = function refreshForm(res) {\n    loadingState(false);\n    console.log(res);\n    setCookies();\n    setResponse(res);\n    setResponse('');\n    setName(cookie.load('name') ? cookie.load('name') : '');\n    setEmail(cookie.load('email') ? cookie.load('email') : '');\n    setDescription('');\n    setPhone(cookie.load('phone') ? cookie.load('phone') : '');\n    setDevice(deviceInfo.device);\n    setBrowser(deviceInfo.browser);\n    setOs(deviceInfo.os);\n    setActiveButton(deviceInfo.device);\n    setError('');\n    setOtherInput('');\n    setShow(false);\n\n    if (res.status == 200) {\n      onClose();\n    }\n\n    setTabIndex(0);\n  };\n\n  var handleTabsChange = function handleTabsChange(index) {\n    setTabIndex(index);\n  };\n\n  var formClose = function formClose() {\n    setResponse('');\n    setName('');\n    setEmail('');\n    setDescription('');\n    setPhone('');\n    setDevice(deviceInfo.device);\n    setBrowser(deviceInfo.browser);\n    setOs(deviceInfo.os);\n    setActiveButton(deviceInfo.device);\n    setError('');\n    setOtherInput('');\n    setShow(false);\n    onClose();\n    setTabIndex(0);\n  };\n\n  var setCookies = function setCookies() {\n    cookie.save(\"name\", name, {\n      path: \"/\"\n    });\n    cookie.save(\"email\", email, {\n      path: \"/\"\n    });\n    cookie.save(\"phone\", phone, {\n      path: \"/\"\n    });\n  };\n\n  var onSubmit = function onSubmit(event) {\n    event.preventDefault();\n    loadingState(true);\n    axios.post('/api/report/submit', form).then(function (response) {\n      return refreshForm(response);\n    }, function (error) {\n      return refreshForm(error);\n    });\n  };\n\n  var updateWidth = function updateWidth() {\n    setScreenWidth(window.innerWidth);\n  };\n\n  React.useEffect(function () {\n    updateWidth();\n    window.addEventListener(\"resize\", updateWidth);\n    return function () {\n      return window.removeEventListener(\"resize\", updateWidth);\n    };\n  });\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    mx: 4,\n    variant: \"unstyled\",\n    onClick: onOpen,\n    colorScheme: \"white\"\n  }, \"Report an Error\"), __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: formClose,\n    isCentered: screenWidth > 420 ? true : false,\n    scrollBehavior: screenWidth > 420 ? \"inside\" : \"outside\"\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    maxWidth: [\"430px\", \"430px\", \"600px\", \"700px\"],\n    maxHeight: screenWidth > 420 ? \"700px\" : \"\",\n    minHeight: screenWidth > 420 ? \"\" : \"100vh\",\n    mb: screenWidth <= 420 ? 0 : \"\",\n    mt: screenWidth <= 420 ? 0 : \"\"\n  }, __jsx(ModalHeader, {\n    style: {\n      zIndex: \"3\",\n      position: \"sticky\",\n      top: 0,\n      backgroundColor: \"white\"\n    }\n  }, __jsx(Button, {\n    verticalAlign: \"middle\",\n    leftIcon: __jsx(FaArrowLeft, null),\n    color: \"primary.500\",\n    variant: \"link\",\n    onClick: formClose\n  }), __jsx(\"span\", {\n    className: \"display5 mx-2\"\n  }, \"Report an Error\")), __jsx(ModalBody, null, __jsx(Box, {\n    className: \"reportanerror\"\n  }, __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"_redirect\"\n  }), __jsx(Tabs, {\n    index: tabIndex,\n    onChange: handleTabsChange,\n    isFitted: true\n  }, __jsx(TabList, null, __jsx(Tab, {\n    paddingX: [\"2px\", \"4px\", \"16px\"],\n    fontSize: [\"sm\", \"md\"],\n    className: \"display6 tab-selected\"\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center button-tab\"\n  }, \"Type of error\"), \" \"), __jsx(Tab, {\n    paddingX: [\"2px\", \"8px\", \"16px\"],\n    fontSize: [\"sm\", \"md\"],\n    className: \"display6 tab-selected\"\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center button-tab\"\n  }, \"Device Details\")), __jsx(Tab, {\n    paddingX: [\"2px\", \"4px\", \"16px\"],\n    fontSize: [\"sm\", \"md\"],\n    className: \"display6 tab-selected\"\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center button-tab\"\n  }, \"Description\"))), __jsx(TabPanels, {\n    className: \"container\"\n  }, __jsx(TabPanel, null, __jsx(FormControl, {\n    mt: 10,\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"name\"\n  }, \"Type of error:\"), __jsx(RadioGroup, {\n    name: \"errortype\",\n    onChange: onChange,\n    defaultValue: form.error\n  }, __jsx(Radio, {\n    value: \"Page not responsive\",\n    onClick: function onClick() {\n      return handleToggle(false);\n    }\n  }, __jsx(Box, {\n    fontSize: [\"md\", \"lg\"]\n  }, \"Page not responsive\")), __jsx(Radio, {\n    value: \"Component not working\",\n    onClick: function onClick() {\n      return handleToggle(false);\n    }\n  }, __jsx(Box, {\n    fontSize: [\"md\", \"lg\"]\n  }, \"Component not working\")), __jsx(Radio, {\n    value: \"Site not loading properly\",\n    onClick: function onClick() {\n      return handleToggle(false);\n    }\n  }, __jsx(Box, {\n    fontSize: [\"md\", \"lg\"]\n  }, \"Site not loading properly\")), __jsx(Radio, {\n    value: \"Some Other Error\",\n    onClick: function onClick() {\n      return handleToggle(true);\n    }\n  }, __jsx(Box, {\n    fontSize: [\"md\", \"lg\"]\n  }, \"Other\")))), rend && __jsx(Collapse, {\n    in: show\n  }, __jsx(FormControl, {\n    mt: 3,\n    isRequired: true\n  }, __jsx(Input, {\n    value: form.othererror,\n    variant: \"flushed\",\n    name: \"othererror\",\n    placeholder: \"Please specify if any other error\",\n    onChange: onChange\n  }))), __jsx(Button, {\n    size: \"lg\",\n    colorScheme: \"primary\",\n    className: \"primary-btn\",\n    mt: 8,\n    mb: 8,\n    onClick: function onClick() {\n      return setTabIndex(1);\n    }\n  }, \"Next\")), __jsx(TabPanel, null, __jsx(FormControl, {\n    mt: 10,\n    isRequired: true\n  }, __jsx(FormLabel, null, \"Device you were using:\"), __jsx(RadioGroup, {\n    isInline: true,\n    spacing: 4,\n    name: \"devicetype\",\n    value: form.device,\n    onChange: function onChange(value) {\n      setDevice(value);\n      setActiveButton(value);\n    }\n  }, __jsx(CustomRadio, {\n    mt: [2, 2, 0],\n    className: \"col-sm-3 \",\n    value: \"mobile\"\n  }, __jsx(\"div\", {\n    className: \"d-flex flex-column\"\n  }, __jsx(SVG, {\n    color: activeButton === \"mobile\" ? \"light.500\" : \"black.500\",\n    src: \"/assets/images/icons/library/devices/iphone-x.svg\"\n  }), __jsx(\"div\", null, \"Phone\"))), __jsx(CustomRadio, {\n    mt: [2, 2, 0],\n    className: \"col-sm-3 \",\n    value: \"tablet\"\n  }, __jsx(\"div\", {\n    className: \"d-flex flex-column\"\n  }, __jsx(SVG, {\n    color: activeButton === \"tablet\" ? \"light.500\" : \"black.500\",\n    src: \"/assets/images/icons/library/devices/tablet.svg\"\n  }), __jsx(\"div\", null, \"Tablet\"))), __jsx(CustomRadio, {\n    mt: [2, 2, 0],\n    className: \"col-sm-3 \",\n    value: \"browser\"\n  }, __jsx(\"div\", {\n    className: \"d-flex flex-column\"\n  }, __jsx(SVG, {\n    color: activeButton === \"browser\" ? \"light.500\" : \"black.500\",\n    src: \"/assets/images/icons/library/devices/imac.svg\"\n  }), __jsx(\"div\", null, \"PC\"))))), __jsx(FormControl, {\n    mt: 10,\n    isRequired: true\n  }, __jsx(FormLabel, null, \"Browser you were using:\"), __jsx(Select, {\n    name: \"browser\",\n    value: form.browser,\n    onChange: onChange,\n    variant: \"flushed\"\n  }, \"                     \", deviceList.browsers.map(function (item) {\n    return __jsx(\"option\", {\n      key: item,\n      value: item\n    }, item);\n  }))), __jsx(FormControl, {\n    mt: 10,\n    isRequired: true\n  }, __jsx(FormLabel, null, \"Operating system you were using:\"), __jsx(Input, {\n    list: \"os\",\n    listStylePos: \"inside\",\n    name: \"operatingsystem\",\n    value: form.operatingSystem,\n    onChange: onChange,\n    variant: \"flushed\"\n  }), __jsx(\"datalist\", {\n    id: \"os\"\n  }, deviceList.os.map(function (item) {\n    return __jsx(\"option\", {\n      key: item,\n      value: item\n    });\n  }))), __jsx(Button, {\n    size: \"lg\",\n    colorScheme: \"primary\",\n    className: \"primary-btn\",\n    mt: 8,\n    mb: 8,\n    onClick: function onClick() {\n      return setTabIndex(2);\n    }\n  }, \"Next\")), __jsx(TabPanel, null, __jsx(FormControl, {\n    isRequired: true,\n    mt: 10\n  }, __jsx(FormLabel, {\n    htmlFor: \"name\"\n  }, \"Name:\", !shown && __jsx(Text, {\n    onClick: function onClick() {\n      setShown(true);\n    }\n  }, name)), shown ? __jsx(Input, {\n    variant: \"flushed\",\n    type: \"text\",\n    name: \"name\",\n    value: form.name,\n    onChange: onChange\n  }) : ''), __jsx(Box, {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(FormControl, {\n    isRequired: true,\n    mt: 10\n  }, __jsx(FormLabel, {\n    htmlFor: \"email\"\n  }, \"Email:\", !showe && __jsx(Text, {\n    onClick: function onClick() {\n      setShowe(true);\n    }\n  }, email)), showe ? __jsx(Input, {\n    variant: \"flushed\",\n    type: \"email\",\n    name: \"email\",\n    value: form.email,\n    onChange: onChange\n  }) : '')), __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(FormControl, {\n    isRequired: true,\n    mt: 10\n  }, __jsx(FormLabel, {\n    htmlFor: \"phone\"\n  }, \"Contact No:\", !showp && __jsx(Text, {\n    onClick: function onClick() {\n      setShowp(true);\n    }\n  }, phone)), showp ? __jsx(Input, {\n    type: \"tel\",\n    pattern: \"[0-9]{10}\",\n    variant: \"flushed\",\n    name: \"phone\",\n    value: form.contactNumber,\n    onChange: onChange\n  }) : ''))), __jsx(FormControl, {\n    mt: 10,\n    isRequired: true\n  }, __jsx(FormLabel, null, \"Describe the error in detail:\"), __jsx(Textarea, {\n    resize: \"vertical\",\n    variant: \"flushed\",\n    size: \"lg\",\n    name: \"description\",\n    value: form.description,\n    onChange: onChange\n  })), __jsx(\"div\", null, __jsx(Button, {\n    mt: 10,\n    mb: 8,\n    type: \"submit\",\n    size: \"lg\",\n    colorScheme: \"primary\",\n    className: \"primary-btn\"\n  }, \"Submit\", isLoading && __jsx(Spinner, {\n    thickness: \"4px\",\n    speed: \"1s\",\n    emptyColor: \"gray.200\",\n    color: \"blue.500\",\n    size: \"sm\"\n  })))))))), formResponse && __jsx(Toast, {\n    response: formResponse\n  })))));\n}\n\nexport default ErrorForm;","map":null,"metadata":{},"sourceType":"module"}