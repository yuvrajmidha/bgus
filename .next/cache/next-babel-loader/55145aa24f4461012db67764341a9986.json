{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Stack, Box } from \"@chakra-ui/react\";\nimport Link from 'next/link';\nimport data from '../data/searchDatabase.json';\nimport services from '../../../src/database/services';\nimport blogs from '../../../src/database/newsroom'; //dynamicSearch(searchTerm) will return filtered results object of this format : {pages: [{name:\"\",link:\"\"}], services: [], articles: []} (same format as in searchDatabase.json)\n//Results is a functional React Component used to show how this data is mapped.\n\nconst servicesArray = Object.entries(services);\n\nconst Matcher = (name, searchTerm) => {\n  //Searching in title\n  const title = name.title;\n  if (title.toLowerCase().includes(searchTerm.toLowerCase())) return true; //Searching in tags array\n\n  for (const tag of name.tags) {\n    let l = Math.min(tag.length, searchTerm.length);\n\n    for (var i = 0; i < l; i++) {\n      if (tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) return true;\n    }\n  } //Not found then\n\n\n  return false;\n};\n\nconst ServiceMatcher = (name, searchTerm) => {\n  // Searching whole term in title\n  const title = name[1].title;\n  let k = Math.min(title.length, searchTerm.length);\n\n  for (var i = 0; i < k; i++) {\n    if (title.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && title.toLowerCase().includes(searchTerm.toLowerCase())) return true;\n  } // Searching whole term in tags\n\n\n  for (const tag of name[1].tags) {\n    let l = Math.min(tag.length, searchTerm.length);\n\n    for (var i = 0; i < l; i++) {\n      if (tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) return true;\n    }\n  } //Breaking search term and searching in tags array\n\n\n  const searchArray = searchTerm.split(\" \");\n  var flag = false;\n  var flagArray = [];\n\n  for (const searchTerm of searchArray) {\n    flag = false; //Searching in tags array\n\n    for (const tag of name[1].tags) {\n      let l = Math.min(tag.length, searchTerm.length);\n\n      for (var i = 0; i < l; i++) {\n        if (tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) {\n          flag = true;\n        }\n      }\n    }\n\n    flagArray.push(flag);\n  }\n\n  if (flagArray.every(x => x == true)) {\n    return true;\n  } //Not found then\n\n\n  return false;\n};\n\nexport const dynamicSearch = searchTerm => {\n  searchTerm = searchTerm.trim();\n  if (searchTerm == '') return {\n    pages: [],\n    services: [],\n    articles: []\n  };else return (//Return object of resultant arrays.\n    {\n      // pages: data.pages.filter( page => Matcher(page,searchTerm)) , //filter pages\n      services: servicesArray.filter(service => ServiceMatcher(service, searchTerm)),\n      //filter services\n      articles: blogs.filter(article => Matcher(article, searchTerm)) //filter services\n\n    }\n  );\n};\nexport const searchData = data; //Example Results Component, Not a Function!\n//Example Usage:  <Results results = {this.dynamicSearch(searchTerm)}/>\n\nexport function Results({\n  results\n}) {\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    spacing: 0\n  }, results.pages.map(page => __jsx(Link, {\n    href: page.link\n  }, __jsx(\"a\", null, \" \", __jsx(Box, {\n    key: page.name,\n    p: 4,\n    borderWidth: \"1px\"\n  }, page.name, \" \", __jsx(\"small\", null, \" -- Page \")), \" \"))), \" \", results.services.map(service => __jsx(Link, {\n    href: service.link\n  }, __jsx(\"a\", null, \" \", __jsx(Box, {\n    key: service.name,\n    p: 4,\n    borderWidth: \"1px\"\n  }, service.name, \" \", __jsx(\"small\", null, \"  -- Service \"), \" \"), \" \"))), \" \", results.articles.map(article => __jsx(Link, {\n    href: article.link\n  }, __jsx(\"a\", null, \" \", __jsx(Box, {\n    key: article.name,\n    p: 4,\n    borderWidth: \"1px\"\n  }, article.name, \" \", __jsx(\"small\", null, \" -- Article \")), \" \"))), \" \"));\n}","map":null,"metadata":{},"sourceType":"module"}