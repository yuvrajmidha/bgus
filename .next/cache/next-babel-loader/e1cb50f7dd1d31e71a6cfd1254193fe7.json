{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"fontSize\", \"image\", \"title\", \"titleSize\", \"titleFont\", \"styleType\", \"stylePos\", \"opacity\", \"spacingY\", \"icon\", \"iconColor\", \"list\", \"text\"];\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Text, List, Heading, ListItem, ListIcon, Box, Flex } from '@chakra-ui/react';\n\nfunction Content(props) {\n  return __jsx(React.Fragment, null, props.data.map(function (_ref) {\n    var _ref$fontSize = _ref.fontSize,\n        fontSize = _ref$fontSize === void 0 ? \"lg\" : _ref$fontSize,\n        image = _ref.image,\n        title = _ref.title,\n        _ref$titleSize = _ref.titleSize,\n        titleSize = _ref$titleSize === void 0 ? \"lg\" : _ref$titleSize,\n        titleFont = _ref.titleFont,\n        _ref$styleType = _ref.styleType,\n        styleType = _ref$styleType === void 0 ? \"disc\" : _ref$styleType,\n        _ref$stylePos = _ref.stylePos,\n        stylePos = _ref$stylePos === void 0 ? \"outside\" : _ref$stylePos,\n        _ref$opacity = _ref.opacity,\n        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n        _ref$spacingY = _ref.spacingY,\n        spacingY = _ref$spacingY === void 0 ? 2 : _ref$spacingY,\n        icon = _ref.icon,\n        iconColor = _ref.iconColor,\n        list = _ref.list,\n        text = _ref.text,\n        props = _objectWithoutProperties(_ref, _excluded);\n\n    return __jsx(React.Fragment, null, title && __jsx(Heading, {\n      fontFamily: titleFont,\n      my: 4,\n      fontSize: titleSize\n    }, title), image && __jsx(Flex, {\n      justifyContent: props.imageJustify\n    }, image), text && __jsx(Text, _extends({\n      fontSize: fontSize,\n      opacity: opacity,\n      my: spacingY\n    }, props), text), list && __jsx(List, _extends({\n      fontSize: fontSize,\n      opacity: opacity,\n      px: 4,\n      my: spacingY,\n      styleType: styleType,\n      stylePos: stylePos\n    }, props), list.map(function (item, index) {\n      return __jsx(ListItem, {\n        key: index\n      }, icon && __jsx(ListIcon, {\n        icon: icon,\n        mr: 4,\n        color: iconColor\n      }), item);\n    })));\n  }));\n}\n\nexport default Content;","map":null,"metadata":{},"sourceType":"module"}