{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Button, Box } from '@chakra-ui/react';\nimport Section from './Section';\nimport Title from './Title';\nimport Description from './Description';\nimport Row from './Row';\nimport Body from './Body';\nimport Link from 'next/link';\nimport Fade from \"react-reveal/Fade\";\nimport Typewriter from 'typewriter-effect';\n\nfunction RenderSection(_ref) {\n  let {\n    title,\n    typeWriter_title,\n    titleStyle,\n    color = \"dark.500\",\n    align = \"center\",\n    description,\n    containerWidth = [\"100%\", \"100%\", \"720px\", \"960px\", \"1140px\"],\n    descriptionStyle,\n    endingButtonTitle,\n    endingButton,\n    slider,\n    endingButtonLink,\n    sliderOption,\n    gap = 4,\n    rowDistance = 0,\n    body\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"title\", \"typeWriter_title\", \"titleStyle\", \"color\", \"align\", \"description\", \"containerWidth\", \"descriptionStyle\", \"endingButtonTitle\", \"endingButton\", \"slider\", \"endingButtonLink\", \"sliderOption\", \"gap\", \"rowDistance\", \"body\"]);\n\n  return __jsx(React.Fragment, null, __jsx(Section, _extends({\n    containerWidth: containerWidth,\n    color: color,\n    align: align\n  }, props), title && __jsx(Title, titleStyle, title), typeWriter_title && __jsx(Title, titleStyle, __jsx(Box, {\n    justifyContent: align,\n    className: \"d-flex flex-lg-row flex-column text-center\"\n  }, __jsx(\"span\", null, typeWriter_title.before), __jsx(Typewriter, {\n    options: {\n      strings: typeWriter_title.typed,\n      autoStart: true,\n      loop: true\n    }\n  }), \"\\xA0\", typeWriter_title.after)), description && __jsx(Description, descriptionStyle, description), body && __jsx(Fade, {\n    duration: 500,\n    delay: 200,\n    cascade: true,\n    distance: \"5%\",\n    bottom: true\n  }, __jsx(Row, {\n    rowDistance: rowDistance\n  }, body && body.map((b, index) => __jsx(Body, _extends({\n    key: index,\n    gap: gap\n  }, b))))), endingButtonTitle && __jsx(Row, {\n    mt: \"2rem\"\n  }, __jsx(Link, {\n    href: \"/\" + endingButtonLink\n  }, __jsx(Button, endingButton, endingButtonTitle)))));\n}\n\nexport default RenderSection;","map":null,"metadata":{},"sourceType":"module"}