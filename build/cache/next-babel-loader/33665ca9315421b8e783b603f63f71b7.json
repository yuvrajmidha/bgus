{"ast":null,"code":"var _jsxFileName = \"/Users/codbrixlabs/Desktop/Projects/bgus/src/components/Feedback/main.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { FormControl, FormLabel, Input, Button, ModalContent, ModalHeader, ModalCloseButton, Spinner, Modal, ModalOverlay, Textarea, Radio, RadioGroup, FormHelperText, useDisclosure, Link, ModalBody } from \"@chakra-ui/react\";\nimport keys from '../../apiKeys';\nimport Toast from '../Toast/main';\nimport axios from \"axios\";\nimport { FaArrowLeft } from 'react-icons/fa';\n\nfunction FeedbackForm(props) {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: rating,\n    1: setRating\n  } = useState('4');\n  const {\n    0: screenWidth,\n    1: setScreenWidth\n  } = useState(1000);\n  let form = {\n    name: name,\n    email: email,\n    description: description,\n    contactNumber: phone,\n    rating: rating\n  };\n  const {\n    0: isLoading,\n    1: loadingState\n  } = useState(false);\n  const {\n    0: formResponse,\n    1: setResponse\n  } = useState('');\n\n  const onChange = event => {\n    const target = event.target;\n    const fieldname = target.name;\n    const value = target.value;\n\n    switch (fieldname) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'description':\n        setDescription(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'rating':\n        setRating(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const refreshForm = res => {\n    loadingState(false);\n    console.log(res);\n    setResponse(res);\n    setResponse('');\n    setName('');\n    setEmail('');\n    setDescription('');\n    setPhone('');\n    setRating('4');\n\n    if (res.status == 200) {\n      setTimeout(() => {\n        onClose();\n      }, 1000);\n    }\n  };\n\n  const formClose = () => {\n    setResponse('');\n    setName('');\n    setEmail('');\n    setDescription('');\n    setPhone('');\n    setRating('4');\n    onClose();\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    loadingState(true);\n    axios.post('/api/feedback/submit', form).then(response => refreshForm(response), error => refreshForm(error));\n  };\n\n  const updateWidth = () => {\n    setScreenWidth(window.innerWidth);\n  };\n\n  React.useEffect(() => {\n    updateWidth();\n    window.addEventListener(\"resize\", updateWidth);\n    return () => window.removeEventListener(\"resize\", updateWidth);\n  });\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    mx: 4,\n    variant: \"unstyled\",\n    onClick: onOpen,\n    colorScheme: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Feedback\"), __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: formClose,\n    isCentered: screenWidth > 420 ? true : false,\n    scrollBehavior: screenWidth > 420 ? \"inside\" : \"outside\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), __jsx(ModalContent, {\n    py: \"2\",\n    maxWidth: [\"430px\", \"400px\", \"600px\"],\n    maxHeight: screenWidth > 420 ? \"700px\" : \"\",\n    minHeight: screenWidth > 420 ? \"\" : \"100vh\",\n    mb: screenWidth <= 420 ? 0 : \"\",\n    mt: screenWidth <= 420 ? 0 : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, __jsx(ModalHeader, {\n    style: {\n      zIndex: \"3\",\n      position: \"sticky\",\n      top: 0,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    verticalAlign: \"middle\",\n    leftIcon: __jsx(FaArrowLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 70\n      }\n    }),\n    color: \"primary.500\",\n    variant: \"link\",\n    onClick: formClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  }), __jsx(\"span\", {\n    className: \"display5 mx-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }, \"Send your feedback!\")), __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, __jsx(\"form\", {\n    className: \"feedback-form px-4\",\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }, __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"_redirect\",\n    value: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 33\n    }\n  }), __jsx(FormControl, {\n    as: \"fieldset\",\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 37\n    }\n  }, \"Rate your experience!\"), __jsx(RadioGroup, {\n    onChange: onChange,\n    name: \"rating\",\n    isInline: true,\n    defaultValue: form.rating,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 37\n    }\n  }, __jsx(Radio, {\n    size: \"lg\",\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 41\n    }\n  }, \"\\uD83D\\uDE41\"), __jsx(Radio, {\n    size: \"lg\",\n    value: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 41\n    }\n  }, \"\\uD83D\\uDE10\"), __jsx(Radio, {\n    size: \"lg\",\n    value: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 41\n    }\n  }, \"\\uD83D\\uDE42\"), __jsx(Radio, {\n    size: \"lg\",\n    value: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 41\n    }\n  }, \"\\uD83D\\uDE0A\")), __jsx(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 37\n    }\n  }, \"We value your feedback\")), __jsx(FormControl, {\n    mt: \"6%\",\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 33\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 37\n    }\n  }, \"Describe your experience:\"), __jsx(Textarea, {\n    resize: \"vertical\",\n    variant: \"flushed\",\n    size: \"lg\",\n    name: \"description\",\n    value: form.description,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 37\n    }\n  })), __jsx(FormControl, {\n    mt: \"10%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 33\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 37\n    }\n  }, \"Name:\"), __jsx(Input, {\n    variant: \"flushed\",\n    type: \"text\",\n    name: \"name\",\n    value: form.name,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 37\n    }\n  })), __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }, __jsx(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 37\n    }\n  }, __jsx(FormControl, {\n    mt: \"14%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 41\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 45\n    }\n  }, \"Email:\"), __jsx(Input, {\n    variant: \"flushed\",\n    type: \"email\",\n    name: \"email\",\n    value: form.email,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 45\n    }\n  }))), __jsx(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 37\n    }\n  }, __jsx(FormControl, {\n    mt: \"14%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 41\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 45\n    }\n  }, \"Contact No.\"), __jsx(Input, {\n    type: \"tel\",\n    pattern: \"[0-9]{10}\",\n    variant: \"flushed\",\n    name: \"phone\",\n    value: form.contactNumber,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 45\n    }\n  })))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 33\n    }\n  }, __jsx(Button, {\n    mt: 10,\n    mb: 8,\n    type: \"submit\",\n    size: \"lg\",\n    colorScheme: \"primary\",\n    className: \"primary-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 37\n    }\n  }, \"Submit\", isLoading && __jsx(Spinner, {\n    thickness: \"4px\",\n    speed: \"1s\",\n    emptyColor: \"gray.200\",\n    color: \"blue.500\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 58\n    }\n  }))))), formResponse && __jsx(Toast, {\n    response: formResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 42\n    }\n  })))));\n}\n\n_s(FeedbackForm, \"xhCvs6+yL65HT+G62d86RuYCadc=\", false, function () {\n  return [useDisclosure];\n});\n\n_c = FeedbackForm;\nexport default FeedbackForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedbackForm\");","map":{"version":3,"sources":["/Users/codbrixlabs/Desktop/Projects/bgus/src/components/Feedback/main.jsx"],"names":["React","useState","FormControl","FormLabel","Input","Button","ModalContent","ModalHeader","ModalCloseButton","Spinner","Modal","ModalOverlay","Textarea","Radio","RadioGroup","FormHelperText","useDisclosure","Link","ModalBody","keys","Toast","axios","FaArrowLeft","FeedbackForm","props","isOpen","onOpen","onClose","name","setName","email","setEmail","description","setDescription","phone","setPhone","rating","setRating","screenWidth","setScreenWidth","form","contactNumber","isLoading","loadingState","formResponse","setResponse","onChange","event","target","fieldname","value","refreshForm","res","console","log","status","setTimeout","formClose","onSubmit","preventDefault","post","then","response","error","updateWidth","window","innerWidth","useEffect","addEventListener","removeEventListener","zIndex","position","top","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    FormControl, FormLabel, Input, Button, ModalContent, ModalHeader, ModalCloseButton, Spinner, Modal, ModalOverlay, Textarea, Radio, RadioGroup, FormHelperText, useDisclosure, Link, ModalBody\r\n} from \"@chakra-ui/react\";\r\nimport keys from '../../apiKeys';\r\nimport Toast from '../Toast/main';\r\nimport axios from \"axios\";\r\nimport { FaArrowLeft } from 'react-icons/fa';\r\nfunction FeedbackForm(props) {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [rating, setRating] = useState('4');\r\n    const [screenWidth, setScreenWidth] = useState(1000);\r\n    let form = {\r\n        name: name,\r\n        email: email,\r\n        description: description,\r\n        contactNumber: phone,\r\n        rating: rating\r\n    }\r\n    const [isLoading, loadingState] = useState(false);\r\n    const [formResponse, setResponse] = useState('');\r\n    const onChange = (event) => {\r\n        const target = event.target\r\n        const fieldname = target.name\r\n        const value = target.value\r\n        switch (fieldname) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'description':\r\n                setDescription(value);\r\n                break;\r\n\r\n            case 'phone':\r\n                setPhone(value);\r\n                break;\r\n\r\n            case 'email':\r\n                setEmail(value);\r\n                break;\r\n\r\n            case 'rating':\r\n                setRating(value);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const refreshForm = (res) => {\r\n        loadingState(false)\r\n        console.log(res);\r\n        setResponse(res);\r\n        setResponse('');\r\n        setName('');\r\n        setEmail('');\r\n        setDescription('');\r\n        setPhone('');\r\n        setRating('4');\r\n        if (res.status == 200) {\r\n            setTimeout(() => {\r\n                onClose();\r\n            }, 1000);\r\n        }\r\n    }\r\n    const formClose = () => {\r\n        setResponse('');\r\n        setName('');\r\n        setEmail('');\r\n        setDescription('');\r\n        setPhone('');\r\n        setRating('4');\r\n        onClose();\r\n    }\r\n    const onSubmit = (event) => {\r\n        event.preventDefault()\r\n        loadingState(true);\r\n        axios.post('/api/feedback/submit', form)\r\n            .then((response) => refreshForm(response), (error) => refreshForm(error))\r\n    }\r\n\r\n    const updateWidth = () => {\r\n        setScreenWidth(window.innerWidth);\r\n    };\r\n    React.useEffect(() => {\r\n        updateWidth();\r\n        window.addEventListener(\"resize\", updateWidth);\r\n        return () => window.removeEventListener(\"resize\", updateWidth);\r\n    });\r\n    return (\r\n        <>\r\n            <Button mx={4} variant=\"unstyled\" onClick={onOpen} colorScheme=\"white\">Feedback</Button>\r\n            <Modal isOpen={isOpen} onClose={formClose} isCentered={screenWidth > 420 ? true : false} scrollBehavior={screenWidth > 420 ? \"inside\" : \"outside\"}>\r\n                <ModalOverlay />\r\n                <ModalContent py=\"2\" maxWidth={[\"430px\", \"400px\", \"600px\"]} maxHeight={screenWidth > 420 ? \"700px\" : \"\"} minHeight={screenWidth > 420 ? \"\" : \"100vh\"} mb={screenWidth <= 420 ? 0 : \"\"} mt={screenWidth <= 420 ? 0 : \"\"}>\r\n                    <ModalBody>\r\n                        <ModalHeader style={{ zIndex: \"3\", position: \"sticky\", top: 0, backgroundColor: \"white\" }}>\r\n                            <Button verticalAlign=\"middle\" leftIcon={<FaArrowLeft/>} color=\"primary.500\" variant=\"link\" onClick={formClose}></Button>\r\n                            <span className=\"display5 mx-2\">Send your feedback!</span></ModalHeader>\r\n                        <div className=\"container\">\r\n                            <form className=\"feedback-form px-4\" onSubmit={onSubmit}>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    name=\"_redirect\"\r\n                                    value=\"false\"\r\n                                />\r\n                                <FormControl as=\"fieldset\" isRequired>\r\n                                    <FormLabel>Rate your experience!</FormLabel>\r\n                                    <RadioGroup onChange={onChange} name=\"rating\" isInline defaultValue={form.rating} spacing={4}>\r\n                                        <Radio size=\"lg\" value=\"1\">🙁</Radio>\r\n                                        <Radio size=\"lg\" value=\"2\">😐</Radio>\r\n                                        <Radio size=\"lg\" value=\"3\">🙂</Radio>\r\n                                        <Radio size=\"lg\" value=\"4\">😊</Radio>\r\n                                    </RadioGroup>\r\n                                    <FormHelperText>\r\n                                        We value your feedback\r\n                            </FormHelperText>\r\n                                </FormControl>\r\n                                <FormControl mt={\"6%\"} isRequired>\r\n                                    <FormLabel>Describe your experience:</FormLabel>\r\n                                    <Textarea\r\n                                        resize={\"vertical\"}\r\n                                        variant=\"flushed\"\r\n                                        size=\"lg\"\r\n                                        name=\"description\"\r\n                                        value={form.description}\r\n                                        onChange={onChange}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl mt={\"10%\"}  >\r\n                                    <FormLabel htmlFor=\"name\">Name:</FormLabel>\r\n                                    <Input\r\n                                        variant=\"flushed\"\r\n                                        type=\"text\"\r\n                                        name=\"name\"\r\n                                        value={form.name}\r\n                                        onChange={onChange}\r\n                                    />\r\n                                </FormControl>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl mt={\"14%\"} >\r\n                                            <FormLabel htmlFor=\"email\">Email:</FormLabel>\r\n                                            <Input\r\n                                                variant=\"flushed\"\r\n                                                type=\"email\"\r\n                                                name=\"email\"\r\n                                                value={form.email}\r\n                                                onChange={onChange}\r\n                                            />\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl mt={\"14%\"} >\r\n                                            <FormLabel htmlFor=\"phone\">Contact No.</FormLabel>\r\n                                            <Input\r\n                                                type=\"tel\"\r\n                                                pattern=\"[0-9]{10}\"\r\n                                                variant=\"flushed\"\r\n                                                name=\"phone\"\r\n                                                value={form.contactNumber}\r\n                                                onChange={onChange}\r\n                                            />\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    <Button\r\n                                        mt={10}\r\n                                        mb={8}\r\n                                        type=\"submit\"\r\n                                        size=\"lg\"\r\n                                        colorScheme=\"primary\"\r\n                                        className=\"primary-btn\"\r\n                                    >Submit{isLoading && <Spinner\r\n                                        thickness=\"4px\"\r\n                                        speed=\"1s\"\r\n                                        emptyColor=\"gray.200\"\r\n                                        color=\"blue.500\"\r\n                                        size=\"sm\"\r\n                                    />}\r\n                                    </Button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        {formResponse && <Toast response={formResponse} />}\r\n                    </ModalBody>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\nexport default FeedbackForm;"]},"metadata":{},"sourceType":"module"}