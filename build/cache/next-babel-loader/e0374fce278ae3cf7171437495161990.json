{"ast":null,"code":"var _jsxFileName = \"/Users/codbrixlabs/Desktop/Projects/bgus/public/assets/js/searchFunctions.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Stack, Box } from \"@chakra-ui/react\";\nimport Link from 'next/link';\nimport data from '../data/searchDatabase.json';\nimport services from '../../../src/database/services';\nimport blogs from '../../../src/database/newsroom'; //dynamicSearch(searchTerm) will return filtered results object of this format : {pages: [{name:\"\",link:\"\"}], services: [], articles: []} (same format as in searchDatabase.json)\n//Results is a functional React Component used to show how this data is mapped.\n\nconst servicesArray = Object.entries(services);\n\nconst Matcher = (name, searchTerm) => {\n  //Searching in title\n  const title = name.title;\n  if (title.toLowerCase().includes(searchTerm.toLowerCase())) return true; //Searching in tags array\n\n  for (const tag of name.tags) {\n    let l = Math.min(tag.length, searchTerm.length);\n\n    for (var i = 0; i < l; i++) {\n      if (tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) return true;\n    }\n  } //Not found then\n\n\n  return false;\n};\n\n_c = Matcher;\n\nconst ServiceMatcher = (name, searchTerm) => {\n  // Searching whole term in title\n  const title = name[1].title;\n  let k = Math.min(title.length, searchTerm.length);\n\n  for (var i = 0; i < k; i++) {\n    if (title.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && title.toLowerCase().includes(searchTerm.toLowerCase())) return true;\n  } // Searching whole term in tags\n\n\n  for (const tag of name[1].tags) {\n    let l = Math.min(tag.length, searchTerm.length);\n\n    for (var i = 0; i < l; i++) {\n      if (tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) return true;\n    }\n  } //Breaking search term and searching in tags array\n\n\n  const searchArray = searchTerm.split(\" \");\n  var flag = false;\n  var flagArray = [];\n\n  for (const searchTerm of searchArray) {\n    flag = false; //Searching in tags array\n\n    for (const tag of name[1].tags) {\n      let l = Math.min(tag.length, searchTerm.length);\n\n      for (var i = 0; i < l; i++) {\n        if (tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) {\n          flag = true;\n        }\n      }\n    }\n\n    flagArray.push(flag);\n  }\n\n  if (flagArray.every(x => x == true)) {\n    return true;\n  } //Not found then\n\n\n  return false;\n};\n\n_c2 = ServiceMatcher;\nexport const dynamicSearch = searchTerm => {\n  searchTerm = searchTerm.trim();\n  if (searchTerm == '') return {\n    pages: [],\n    services: [],\n    articles: []\n  };else return (//Return object of resultant arrays.\n    {\n      // pages: data.pages.filter( page => Matcher(page,searchTerm)) , //filter pages\n      services: servicesArray.filter(service => ServiceMatcher(service, searchTerm)),\n      //filter services\n      articles: blogs.filter(article => Matcher(article, searchTerm)) //filter services\n\n    }\n  );\n};\nexport const searchData = data; //Example Results Component, Not a Function!\n//Example Usage:  <Results results = {this.dynamicSearch(searchTerm)}/>\n\nexport function Results(_ref) {\n  let {\n    results\n  } = _ref;\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, results.pages.map(page => __jsx(Link, {\n    href: page.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 38\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 61\n    }\n  }, \" \", __jsx(Box, {\n    key: page.name,\n    p: 4,\n    borderWidth: \"1px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 65\n    }\n  }, page.name, \" \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 122\n    }\n  }, \" -- Page \")), \" \"))), \" \", results.services.map(service => __jsx(Link, {\n    href: service.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 44\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 70\n    }\n  }, \" \", __jsx(Box, {\n    key: service.name,\n    p: 4,\n    borderWidth: \"1px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 74\n    }\n  }, service.name, \" \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 137\n    }\n  }, \"  -- Service \"), \" \"), \" \"))), \" \", results.articles.map(article => __jsx(Link, {\n    href: article.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 44\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 70\n    }\n  }, \" \", __jsx(Box, {\n    key: article.name,\n    p: 4,\n    borderWidth: \"1px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 74\n    }\n  }, article.name, \" \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 137\n    }\n  }, \" -- Article \")), \" \"))), \" \"));\n}\n_c3 = Results;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Matcher\");\n$RefreshReg$(_c2, \"ServiceMatcher\");\n$RefreshReg$(_c3, \"Results\");","map":{"version":3,"sources":["/Users/codbrixlabs/Desktop/Projects/bgus/public/assets/js/searchFunctions.js"],"names":["Stack","Box","Link","data","services","blogs","servicesArray","Object","entries","Matcher","name","searchTerm","title","toLowerCase","includes","tag","tags","l","Math","min","length","i","charAt","ServiceMatcher","k","searchArray","split","flag","flagArray","push","every","x","dynamicSearch","trim","pages","articles","filter","service","article","searchData","Results","results","map","page","link"],"mappings":"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","sourcesContent":["import { Stack, Box } from \"@chakra-ui/react\";\r\nimport Link from 'next/link';\r\nimport data from '../data/searchDatabase.json';\r\nimport services from '../../../src/database/services';\r\nimport blogs from '../../../src/database/newsroom';\r\n\r\n//dynamicSearch(searchTerm) will return filtered results object of this format : {pages: [{name:\"\",link:\"\"}], services: [], articles: []} (same format as in searchDatabase.json)\r\n//Results is a functional React Component used to show how this data is mapped.\r\nconst servicesArray = Object.entries(services);\r\n\r\nconst Matcher = (name,searchTerm) =>{\r\n  //Searching in title\r\n  const title = name.title\r\n  if(title.toLowerCase().includes(searchTerm.toLowerCase())) return(true);\r\n    \r\n\r\n  //Searching in tags array\r\n  for(const tag of name.tags){\r\n    let l = Math.min(tag.length, searchTerm.length);\r\n    for(var i=0; i<l; i++) {\r\n      if( tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) return(true);\r\n    }\r\n  }\r\n\r\n  //Not found then\r\n  return(false);\r\n}\r\n\r\nconst ServiceMatcher = (name,searchTerm) =>{\r\n\r\n  // Searching whole term in title\r\n  const title = name[1].title\r\n  let k = Math.min(title.length, searchTerm.length);\r\n    for(var i=0; i<k; i++) {\r\n      if( title.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && title.toLowerCase().includes(searchTerm.toLowerCase())) return(true);\r\n    }\r\n\r\n  // Searching whole term in tags\r\n  for(const tag of name[1].tags){\r\n    let l = Math.min(tag.length, searchTerm.length);\r\n    for(var i=0; i<l; i++) {\r\n      if( tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) return(true);\r\n    }\r\n  }\r\n\r\n  //Breaking search term and searching in tags array\r\n  const searchArray = searchTerm.split(\" \")\r\n  var flag =false;\r\n  var flagArray = []\r\n  for(const searchTerm of searchArray){\r\n    flag = false;\r\n    \r\n    //Searching in tags array\r\n    for(const tag of name[1].tags){\r\n      let l = Math.min(tag.length, searchTerm.length);\r\n      for(var i=0; i<l; i++) {\r\n        if( tag.toLowerCase().charAt(i) == searchTerm.toLowerCase().charAt(i) && tag.toLowerCase().includes(searchTerm.toLowerCase())) {flag= true;}\r\n      }\r\n    }\r\n\r\n    flagArray.push(flag);\r\n  }\r\n\r\n  if(flagArray.every((x)=>x==true)){return(true)}\r\n  //Not found then\r\n  return(false);\r\n}\r\n\r\nexport const dynamicSearch = (searchTerm) => {\r\n  searchTerm = searchTerm.trim();\r\n  if(searchTerm == '') return({pages:[],services:[],articles:[]}) \r\n  else return( //Return object of resultant arrays.\r\n    { \r\n      // pages: data.pages.filter( page => Matcher(page,searchTerm)) , //filter pages\r\n      services: servicesArray.filter( service => ServiceMatcher(service,searchTerm)), //filter services\r\n      articles: blogs.filter( article => Matcher(article,searchTerm)) //filter services\r\n    }\r\n  ); \r\n}\r\n\r\nexport const searchData = data\r\n//Example Results Component, Not a Function!\r\n//Example Usage:  <Results results = {this.dynamicSearch(searchTerm)}/>\r\nexport function Results({results}){\r\n    return (\r\n      <>\r\n        <Stack spacing={0}>\r\n          {results.pages.map(page => <Link href={page.link}><a> <Box key={page.name} p={4} borderWidth=\"1px\">{page.name} <small> -- Page </small></Box> </a></Link> )} {/*Display Pages First*/}\r\n          {results.services.map(service => <Link href={service.link}><a> <Box key={service.name} p={4} borderWidth=\"1px\">{service.name} <small>  -- Service </small> </Box> </a></Link> )} {/*Display Services*/}\r\n          {results.articles.map(article => <Link href={article.link}><a> <Box key={article.name} p={4} borderWidth=\"1px\">{article.name} <small> -- Article </small></Box> </a></Link> )} {/*Display Services*/}\r\n        </Stack>\r\n      </>\r\n    )    \r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}