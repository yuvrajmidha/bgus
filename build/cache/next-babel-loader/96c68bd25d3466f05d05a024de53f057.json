{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useDisclosure, FormControl, FormLabel, Input, Button, ModalContent, ModalHeader, Popover, PopoverTrigger, PopoverContent, PopoverHeader, PopoverBody, PopoverFooter, PopoverArrow, PopoverCloseButton, ModalCloseButton, Spinner, Modal, ModalOverlay, Textarea, ModalBody, Box, Alert, AlertIcon, Tooltip, Icon } from \"@chakra-ui/react\";\nimport keys from '../../apiKeys';\nimport Toast from '../Toast/main';\nimport axios from \"axios\";\nimport Description from '../../pageBuilder/Description';\nimport { FaArrowLeft } from 'react-icons/fa';\n\nfunction GetaQuoteForm(props) {\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(''),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      message = _useState3[0],\n      setMessage = _useState3[1];\n\n  var _useState4 = useState(''),\n      phone = _useState4[0],\n      setPhone = _useState4[1];\n\n  var _useState5 = useState(1000),\n      screenWidth = _useState5[0],\n      setScreenWidth = _useState5[1];\n\n  var form = {\n    name: name,\n    email: email,\n    description: message,\n    contactNumber: phone,\n    serviceName: props.serviceName,\n    serviceString: props.serviceDescription\n  };\n\n  var _useState6 = useState(false),\n      isLoading = _useState6[0],\n      loadingState = _useState6[1];\n\n  var _useState7 = useState(''),\n      formResponse = _useState7[0],\n      setResponse = _useState7[1];\n\n  var onChange = function onChange(event) {\n    var target = event.target;\n    var fieldname = target.name;\n    var value = target.value;\n\n    switch (fieldname) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'message':\n        setMessage(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var refreshForm = function refreshForm(res) {\n    loadingState(false);\n    console.log(res);\n    setResponse(res);\n    setResponse('');\n    setName('');\n    setEmail('');\n    setMessage('');\n    setPhone('');\n\n    if (res.status == 200) {\n      setTimeout(function () {\n        onClose();\n      }, 1000);\n    }\n  };\n\n  var formClose = function formClose() {\n    setResponse('');\n    setName('');\n    setEmail('');\n    setMessage('');\n    setPhone('');\n    onClose();\n  };\n\n  var onSubmit = function onSubmit(event) {\n    event.preventDefault();\n    loadingState(true);\n    axios.post('/api/service/submit', form).then(function (response) {\n      return refreshForm(response);\n    }, function (error) {\n      return refreshForm(error);\n    });\n  };\n\n  var description = props.serviceDescription.split(',');\n\n  var updateWidth = function updateWidth() {\n    setScreenWidth(window.innerWidth);\n  };\n\n  React.useEffect(function () {\n    updateWidth();\n    window.addEventListener(\"resize\", updateWidth);\n    return function () {\n      return window.removeEventListener(\"resize\", updateWidth);\n    };\n  });\n  return __jsx(React.Fragment, null, !props.button && __jsx(\"div\", {\n    className: \"mt-3 w-100 px-3 d-flex justify-content-between\"\n  }, props.title && __jsx(\"p\", null, props.title), __jsx(\"a\", {\n    className: \"link\",\n    onClick: onOpen\n  }, \"Get a quote\")), props.button && __jsx(Button, {\n    size: \"lg\",\n    className: props.buttonStyle,\n    variant: \"outline\",\n    colorScheme: \"primary\",\n    onClick: onOpen\n  }, props.children || \"Get a Quote\"), __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: formClose,\n    isCentered: screenWidth > 420 ? true : false,\n    scrollBehavior: screenWidth > 420 ? \"inside\" : \"outside\"\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    maxWidth: [\"400px\", \"400px\", \"600px\"],\n    maxHeight: screenWidth > 420 ? \"800px\" : \"\",\n    minHeight: screenWidth > 420 ? \"\" : \"100vh\",\n    mb: screenWidth <= 420 ? 0 : \"\",\n    mt: screenWidth <= 420 ? 0 : \"\"\n  }, __jsx(ModalBody, null, __jsx(ModalHeader, {\n    style: {\n      zIndex: \"3\",\n      position: \"sticky\",\n      top: 0,\n      backgroundColor: \"white\"\n    }\n  }, \" \", __jsx(Button, {\n    verticalAlign: \"middle\",\n    leftIcon: __jsx(FaArrowLeft, null),\n    color: \"primary.500\",\n    variant: \"link\",\n    onClick: formClose\n  }), __jsx(\"span\", {\n    className: \"display5\"\n  }, props.serviceName)), __jsx(\"div\", {\n    className: \"d-flex flex-wrap px-3\"\n  }, description.map(function (service, index) {\n    return __jsx(\"div\", {\n      className: \"rounded-8 hover-effect bg-light m-2 py-2 px-3\",\n      key: index\n    }, service);\n  })), __jsx(Box, {\n    mb: 4,\n    className: \"container contact-form\"\n  }, __jsx(Popover, {\n    trigger: \"hover\"\n  }, __jsx(PopoverTrigger, null, __jsx(Button, {\n    variant: \"link\",\n    colorScheme: \"primary\",\n    mb: 6,\n    mt: 2\n  }, \"Whats this?\")), __jsx(PopoverContent, {\n    zIndex: 4\n  }, __jsx(PopoverBody, null, \"We're working on automating our sign-up process to make it easier for you to buy and use our services. In the meantime, please fill out and submit the form. We will have one of our qualified account managers contact you about system availability for the configuration you desire. We look forward to speaking with you.\"))), __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"_redirect\",\n    value: \"false\"\n  }), __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"serviceName\",\n    value: form.serviceName\n  }), __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"serviceDescription\",\n    value: form.serviceString\n  }), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"name\"\n  }, \"Name:\"), __jsx(Input, {\n    variant: \"flushed\",\n    type: \"text\",\n    name: \"name\",\n    value: form.name,\n    onChange: onChange\n  })), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(FormControl, {\n    mt: \"14%\",\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"email\"\n  }, \"Email:\"), __jsx(Input, {\n    variant: \"flushed\",\n    type: \"email\",\n    name: \"email\",\n    value: form.email,\n    onChange: onChange\n  }))), __jsx(\"div\", {\n    className: \"col-md-6\"\n  }, __jsx(FormControl, {\n    mt: \"14%\",\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"phone\"\n  }, \"Contact No.\"), __jsx(Input, {\n    type: \"tel\",\n    pattern: \"[0-9]{10}\",\n    variant: \"flushed\",\n    name: \"phone\",\n    value: form.contactNumber,\n    onChange: onChange\n  })))), __jsx(FormControl, {\n    mt: \"9%\",\n    isRequired: true\n  }, __jsx(FormLabel, null, \"Details:\"), __jsx(Textarea, {\n    resize: \"vertical\",\n    variant: \"flushed\",\n    size: \"lg\",\n    name: \"message\",\n    value: form.description,\n    onChange: onChange\n  })), __jsx(\"div\", null, __jsx(Button, {\n    mt: 10,\n    type: \"submit\",\n    size: \"lg\",\n    colorScheme: \"primary\",\n    className: \"primary-btn\"\n  }, \"Submit\", isLoading && __jsx(Spinner, {\n    thickness: \"4px\",\n    speed: \"1s\",\n    emptyColor: \"gray.200\",\n    color: \"blue.500\",\n    size: \"sm\"\n  }))))), formResponse && __jsx(Toast, {\n    response: formResponse\n  })))));\n}\n\nexport default GetaQuoteForm;","map":null,"metadata":{},"sourceType":"module"}