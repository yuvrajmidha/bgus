{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Content from './components/Content';\nimport { Box, Flex } from '@chakra-ui/react';\nimport Video from './components/Video';\nimport ImageGroup from './components/ImageGroup';\nimport MyList from './components/MyList';\nimport Feature from './components/Feature';\nimport Feature2 from './components/Feature2';\nimport NumberCount from './components/NumberCount';\nimport AccordionWithImage from './components/AccordionWithImage';\nimport Service from '../components/cards/Service';\nimport AlternateRow from './components/AlternateRow';\nimport Container from './Container';\nimport Row from './Row';\nimport Fade from \"react-reveal/Fade\";\nimport { SimpleGrid } from '@chakra-ui/react';\nimport ImageAndText from './components/ImageAndText';\n\nfunction Body(_ref) {\n  let {\n    gap = 4,\n    type,\n    data,\n    width = \"100%\"\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"gap\", \"type\", \"data\", \"width\"]);\n\n  function giveMeComponent(type, data) {\n    switch (type) {\n      case \"content\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(Content, {\n          data: data\n        }));\n\n      case \"video\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(Video, {\n          data: data\n        }));\n\n      case \"list\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(MyList, {\n          data: data\n        }));\n\n      case \"imageGroup\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(ImageGroup, data));\n\n      case \"feature\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(Feature, data));\n\n      case \"feature2\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(Feature2, data));\n\n      case \"numberCount\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(NumberCount, data));\n\n      case \"accordion\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(AccordionWithImage, data));\n\n      case \"service\":\n        return __jsx(Box, _extends({\n          px: [3, 3, gap / 2],\n          my: 4,\n          w: width\n        }, props), __jsx(Service, {\n          service: data\n        }));\n\n      case \"pricing\":\n        return __jsx(Box, _extends({\n          px: 0,\n          my: 4,\n          w: width\n        }, props), data);\n\n      case \"altrow\":\n        return __jsx(AlternateRow, data);\n\n      case \"image&text\":\n        return __jsx(Box, _extends({\n          px: 0,\n          w: width\n        }, props), __jsx(ImageAndText, data));\n\n      case \"container\":\n        return __jsx(Box, _extends({\n          px: 0,\n          my: 4,\n          w: width\n        }, props), __jsx(Row, null, props.containerData.map((dat, key) => __jsx(Box, {\n          key: index,\n          px: [6, 6, gap / 2],\n          my: 4,\n          w: dat.width\n        }, giveMeComponent(dat.type, dat.data), \" \"))));\n    }\n  }\n\n  return __jsx(React.Fragment, null, giveMeComponent(type, data));\n}\n\nexport default Body;","map":null,"metadata":{},"sourceType":"module"}